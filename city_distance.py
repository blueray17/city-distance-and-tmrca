# -*- coding: utf-8 -*-
"""city distance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AbV9AkCUb0-v43hBRqLse9omyWtLO3Ek
"""

!pip install kagglehub
import kagglehub
from kagglehub import KaggleDatasetAdapter
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.spatial.distance import pdist, squareform
from google.colab import files
import networkx as nx
from matplotlib.widgets import Slider
from sklearn.cluster import AgglomerativeClustering, DBSCAN

df = kagglehub.load_dataset(
  KaggleDatasetAdapter.PANDAS,
  "juanmah/world-cities",
  "worldcities.csv",
)

print("First 5 records:", df.head())

indonesia = df[df['country'] == 'Indonesia']
indonesia = indonesia.drop(['city_ascii','iso2','iso3','admin_name','capital','population','id'], axis=1)

# Ubah ke float, buang baris dengan nilai tidak valid
df['lat'] = pd.to_numeric(df['lat'], errors='coerce')
df['lng'] = pd.to_numeric(df['lng'], errors='coerce')

# Drop baris yang lat/lng-nya NaN (gagal dikonversi ke float)
df = df.dropna(subset=['lat', 'lng'])

# Pastikan semuanya float
print(indonesia.dtypes)

print(indonesia)
indonesia.describe()

from google.colab import files
# Ambil koordinat lat dan lng
coords = indonesia[['lat', 'lng']].to_numpy()

# Hitung jarak Euclidean pairwise
dist_matrix = squareform(pdist(coords, metric='euclidean'))

# Buat DataFrame jarak dengan label kota
distance_df = pd.DataFrame(dist_matrix, index=indonesia['city'], columns=indonesia['city'])

print(distance_df.head())

distance_df_km = distance_df * 111

# Bulatkan 2 angka di belakang koma
distance_df_km = distance_df_km.round(0)

# Menampilkan hasil
print(distance_df_km.head())

# Simpan ke Excel
filename = "cities_euclidean_distances.xlsx"
distance_df_km.to_excel(filename)

# Unduh file di Colab
# files.download(filename)

import networkx as nx
import matplotlib.pyplot as plt

# Buat graf
G = nx.Graph()
cities = distance_df_km.index.tolist()

# Tambah node (pakai nama kota langsung)
G.add_nodes_from(cities)

# Tambah edge dengan bobot jarak
for i in range(len(cities)):
    for j in range(i + 1, len(cities)):
        city1, city2 = cities[i], cities[j]
        distance = distance_df_km.loc[city1, city2]
        G.add_edge(city1, city2, weight=distance)

# Layout dan visualisasi
plt.figure(figsize=(10, 8))
pos = nx.spring_layout(G, seed=42, weight='weight')  # layout berdasarkan jarak
nx.draw(G, pos, with_labels=True, node_size=500, font_size=10, alpha=0.9)

# Tambahkan label bobot (jarak)
edge_labels = nx.get_edge_attributes(G, 'weight')
edge_labels = {k: f"{v:.1f} km" for k, v in edge_labels.items()}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8)

plt.title("Graph of Indonesian Cities based on Euclidean Distance (in km)")
plt.axis('off')
plt.show()